Chunked function from moon-guard course:
----------------------------------------------------------------------------------------
islice():
the islice function -> take 2 arguments. one an iterable object and one an integer number ; for example:
iterable = [1,2,3] and n=2  ; islice(iterable, n) = [1,2] or islice(list, n=3) = [1,2,3]; it returns first n elements of the iterable object
as a list;
----------------------------------------------------------------------------------------
iter():
this function will return an iterator object from an iterable object , it receives another value, and it's sentinel; when define
sentinel in iter() it will iterate over that iterable object over and over again till it returns the sentinel value ; then
it stops at that. for example: iterable = [1,2,3,4] ; iter(iterable) -> returns iterator object but if you want the values
should next() ; and it returns the first value of the iterable; next(iter(iterable)) -> 1; and if you want the next value
you can use next() again, and it returns 2 and so on; it is good for large iterable objects like large lists ; you could
not to use for loop and loop through the whole list to get one index of it; you can use iter and then use next to get to
one index, and it lowers the speed and ... . and about sentinel ; for using sentinel in iter() the first argument of the iter
should be callable; line a function. you can't use list as the iterable and set the sentinel too.
so it's better to use iter and sentinel instead of using loops like while and for.
----------------------------------------------------------------------------------------
partial():
partial is a function from functool module. you could use it when you have a function, and you want to use it several times.
using partial could help you to simplify the codes and prevent to use repetitive codes. it takes a function and the arguments of it.
you can choose to set which argument you want ; but in direct calling function you have to set all the arguments. and another
good point of using partial is reusable code. it means that you can use that code again and in several situations.
----------------------------------------------------------------------------------------
deque():
from collections import deque
it's a function that turns an iterable object to deque object that you can add or remove or get indexes from left and right
of that iterable. but in lists you can't do that, you can add, remove or get the indexes from right.
if you want to access to the indexes in deque you should do it with pointing at that index's number. for example:
list = [1,2,3,4], deque(list) ->deque([1, 2, 3, 4]), deque(list)[0] -> 1.
also deque function gets another value, and it's maxlen. for example:
list = [1,2,3,4], deque(list, maxlen=2) ->deque([3, 4]). it returns maxlen elements of the iterable from right.
and deque(list, maxlen=2)[0] -> 3.
----------------------------------------------------------------------------------------
Tests Tips:
self.subTest():
in writing tests, if we have several tests with same assert; for example assertEqual;
we can create a list and in that list we can write our situations in tuples, then we can iterate over that list
and with this command -> with self.subTest(args): ; we can write the appropriate assert below that.
for example :
cases = [(range(2), 2) , ...]
for iterable, expected in cases:
    with self.subTest(iterable=iterable):
        self.assertEqual(func(iterable), expected)
we can not write the subTest line, but with that if the test got failure in the terminal we can understand which line is
returning the error. this is the good thing to use in tests when we have several same situations.
----------------------------------------------------------------------------------------
count():
from itertools import count
this function return from 0 and go up with 1 number; 0, 1, 2, 3, 4, ... .
every time we print(next(count())) it shows us the next number.
----------------------------------------------------------------------------------------
chain():
from itertools import chain
This function receives iterable objects and stick them all together in one object; for example:
odds=[1,3,5] , evens=[2,4,6]; list(chain(odds, evens)) -> [1,3,5,2,4,6].
this function also have a classmethod called from_iterable, and you could call it on an iterable object like:
name='mina'; result=chain.from_iterable(name); list(result) -> ['m', 'i', 'n', 'a']. also you can do it like this too:
names = ['mina', 'bita', 'hossein'] ; result=chain.from_iterable(names); list(result) -> ['m', 'i', 'n', 'a', 'b', 'i', 't', ...].
----------------------------------------------------------------------------------------
zip()
This function gets iterable objects and mix them together by following the order. for example:
names =['mina', 'bita'], ages=[23, 18]; list(zip(names, ages)) -> [('mina', 23), ('bita', 18)]
----------------------------------------------------------------------------------------
enumerate()
This function has its own iterator . from 0. for example:
names =['mina', 'bita', 'hossein'], list(enumerate(names)) -> [(0, 'mina'), (1, 'bita'), (2, 'hossein')]. also for loop through
the names with enumerate you have to write like this : for n, z in enumerate(names):
                                                            print(n, z)
and the result is like this-> 1 mina  2 bita 3 hossein; first item (n) is the iterator and second item(i) is the names iterator.
----------------------------------------------------------------------------------------
